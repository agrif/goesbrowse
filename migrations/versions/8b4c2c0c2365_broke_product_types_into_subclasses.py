"""broke product types into subclasses

Revision ID: 8b4c2c0c2365
Revises: eac00fc6a70d
Create Date: 2019-07-27 15:04:22.836019

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '8b4c2c0c2365'
down_revision = 'eac00fc6a70d'
branch_labels = None
depends_on = None

producttable = sa.Table(
    'product',
    sa.MetaData(),
    sa.Column('id', sa.Integer, primary_key=True),
    sa.Column('type', sa.Text),
    sa.Column('meta', sa.JSON),
    sa.Column('source', sa.Text),
    sa.Column('date', sa.DateTime),
    sa.Column('name', sa.Text),

    sa.Column('nnn', sa.Text),
    sa.Column('xxx', sa.Text),

    sa.Column('height', sa.Integer),
    sa.Column('width', sa.Integer),

    sa.Column('region', sa.Text),
    sa.Column('channel', sa.Text),
    sa.Column('style', sa.Enum('NORMAL', 'ENHANCED', 'FALSECOLOR', name='mapstyle')),
    sa.Column('projection_id', sa.Integer),
)

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('product', schema=None) as batch_op:
        batch_op.add_column(sa.Column('height', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('nnn', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('style', sa.Enum('NORMAL', 'ENHANCED', 'FALSECOLOR', name='mapstyle'), nullable=True))
        batch_op.add_column(sa.Column('width', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('xxx', sa.Text(), nullable=True))
        batch_op.create_index(batch_op.f('ix_product_height'), ['height'], unique=False)
        batch_op.create_index(batch_op.f('ix_product_nnn'), ['nnn'], unique=False)
        batch_op.create_index(batch_op.f('ix_product_style'), ['style'], unique=False)
        batch_op.create_index(batch_op.f('ix_product_width'), ['width'], unique=False)
        batch_op.create_index(batch_op.f('ix_product_xxx'), ['xxx'], unique=False)

    # ### end Alembic commands ###

    # data migration
    connection = op.get_bind()
    for p in connection.execute(producttable.select()):
        us = {}

        # first, lowercase everything
        us['source'] = p.source.lower() if p.source else p.source
        us['channel'] = p.channel.lower() if p.channel else p.channel
        us['region'] = p.region.lower() if p.region else p.region

        # figure out the type
        us['type'] = None
        if p.type.lower() == 'txt':
            us['type'] = 'TEXT'
        else:
            us['type'] = 'IMAGE'
            if p.projection_id:
                us['type'] = 'MAP'

        # create the subclass
        if us['type'] == 'TEXT':
            # we have no hope of extracting these generically, so...
            pass
        if us['type'] in ['IMAGE', 'MAP']:
            # awful. simply awful.
            try:
                width = p.meta['SegmentIdentification']['MaxColumn']
                height = p.meta['SegmentIdentification']['MaxLine']
            except KeyError:
                try:
                    width = p.meta['ImageStructure']['Columns']
                    height = p.meta['ImageStructure']['Lines']
                except KeyError:
                    width = None
                    height = None
            us['width'] = width
            us['height'] = height
        if us['type'] == 'MAP':
            us['style'] = 'NORMAL'
            if us['channel'] and us['channel'].endswith('_enhanced'):
                us['style'] = 'ENHANCED'
                us['channel'], _ = us['channel'].rsplit('_', 1)
            if us['channel'] == 'fc':
                us['style'] = 'FALSECOLOR'

        # update the entry
        connection.execute(producttable.update().where(producttable.c.id == p.id).values(**us))

    # change type
    with op.batch_alter_table('product', schema=None) as batch_op:
        batch_op.alter_column('type', type_=sa.Enum('TEXT', 'IMAGE', 'MAP', name='producttype'), existing_type=sa.Text())


def downgrade():
    with op.batch_alter_table('product', schema=None) as batch_op:
        batch_op.alter_column('type', existing_type=sa.Enum('TEXT', 'IMAGE', 'MAP', name='producttype'), type_=sa.Text())

    # data migration
    connection = op.get_bind()
    for p in connection.execute(producttable.select()):
        us = {}

        # first, uppercase everything
        us['source'] = p.source.upper() if p.source else p.source
        us['channel'] = p.channel.upper() if p.channel else p.channel
        us['region'] = p.region.upper() if p.region else p.region

        if p.style and p.style == 'ENHANCED':
            us['channel'] += '_enhanced'

        if us['source'] in ['TEXT', 'NWS']:
            us['source'] = us['source'].lower()

        us['type'] = p.meta['Path'].rsplit('.', 1)[-1].lower()

        # update the entry
        connection.execute(producttable.update().where(producttable.c.id == p.id).values(**us))
    
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('product', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_product_xxx'))
        batch_op.drop_index(batch_op.f('ix_product_width'))
        batch_op.drop_index(batch_op.f('ix_product_style'))
        batch_op.drop_index(batch_op.f('ix_product_nnn'))
        batch_op.drop_index(batch_op.f('ix_product_height'))
        batch_op.drop_column('xxx')
        batch_op.drop_column('width')
        batch_op.drop_column('style')
        batch_op.drop_column('nnn')
        batch_op.drop_column('height')

    # ### end Alembic commands ###

