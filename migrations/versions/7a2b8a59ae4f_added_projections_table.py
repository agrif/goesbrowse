"""added projections table

Revision ID: 7a2b8a59ae4f
Revises: e743e0017e0a
Create Date: 2019-07-05 20:59:40.437909

"""
from alembic import op
import sqlalchemy as sa

import goesbrowse.database


# revision identifiers, used by Alembic.
revision = '7a2b8a59ae4f'
down_revision = 'e743e0017e0a'
branch_labels = None
depends_on = None

filetable = sa.Table(
    'file',
    sa.MetaData(),
    sa.Column('id', sa.Integer, primary_key=True),
    sa.Column('json', sa.JSON),
    sa.Column('type', sa.Text),
    sa.Column('projection_id', sa.Integer()),
)

projtable = sa.Table(
    'projection',
    sa.MetaData(),
    sa.Column('id', sa.Integer, primary_key=True),
    sa.Column('width', sa.Integer(), nullable=True),
    sa.Column('height', sa.Integer(), nullable=True),
    sa.Column('x_offset', sa.Integer(), nullable=True),
    sa.Column('y_offset', sa.Integer(), nullable=True),
    sa.Column('x_scale', sa.Integer(), nullable=True),
    sa.Column('y_scale', sa.Integer(), nullable=True),
    sa.Column('lon_0', sa.Float(), nullable=True),
)

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('projection',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('width', sa.Integer(), nullable=True),
    sa.Column('height', sa.Integer(), nullable=True),
    sa.Column('x_offset', sa.Integer(), nullable=True),
    sa.Column('y_offset', sa.Integer(), nullable=True),
    sa.Column('x_scale', sa.Integer(), nullable=True),
    sa.Column('y_scale', sa.Integer(), nullable=True),
    sa.Column('lon_0', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )

    with op.batch_alter_table('file') as batch_op:
        batch_op.add_column(sa.Column('projection_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key('file_projection', 'projection', ['projection_id'], ['id'])
    # ### end Alembic commands ###

    # do data migration
    connection = op.get_bind()
    for file in connection.execute(filetable.select()):
        proj = goesbrowse.database.Projection.from_meta(file.json)
        if not proj:
            continue
        for test in connection.execute(projtable.select()
                .where(projtable.c.width == proj.width)
                .where(projtable.c.height == proj.height)
                .where(projtable.c.x_offset == proj.x_offset)
                .where(projtable.c.y_offset == proj.y_offset)
                .where(projtable.c.x_scale == proj.x_scale)
                .where(projtable.c.y_scale == proj.y_scale)
                .where(projtable.c.lon_0 == proj.lon_0)):
            proj_id = test.id
            break
        else:
            result = connection.execute(projtable.insert().values(
                width=proj.width,
                height=proj.height,
                x_offset=proj.x_offset,
                y_offset=proj.y_offset,
                x_scale=proj.x_scale,
                y_scale=proj.y_scale,
                lon_0=proj.lon_0,
            ))
            proj_id, = result.inserted_primary_key
        connection.execute(filetable.update().where(filetable.c.id == file.id).values(projection_id=proj_id))

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('file') as batch_op:
        batch_op.drop_constraint('file_projection', type_='foreignkey')
        batch_op.drop_column('projection_id')
    op.drop_table('projection')
    # ### end Alembic commands ###
