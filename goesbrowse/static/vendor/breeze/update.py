# helper script to fetch breeze icons in light and dark, and construct
# the relevant css

import os
import sys
import click
import urllib.request
import urllib.parse

BREEZE_URL = "https://github.com/KDE/breeze-icons/raw/master/"

THEMES = {
    'light': 'icons/',
    'dark': 'icons-dark/',
}

ICONS = {
    # name: (size, url),
    'map': (1.5, 'actions/22/globe.svg'),
    'image': (1.5, 'places/22/folder-pictures.svg'),
    'text': (1.5, 'places/22/folder-text.svg'),

    'enhanced': (1.5, 'actions/22/contrast.svg'),
    'falsecolor': (1.5, 'actions/22/channelmixer.svg'),

    'meta': (1.5, 'actions/22/help-about.svg'),
}

def do_icon(outdir, name, url, force):
    exts = url.rsplit('/', 1)[1].rsplit('.')
    if len(exts) > 1:
        ext = '.' + exts[-1]
    else:
        ext = ''
    fname = name + ext
    out = os.path.join(outdir, fname)
    if force or not os.path.exists(out):
        print('writing {}'.format(out))
        urllib.request.urlretrieve(url, out)
    return fname

def do_theme(outdir, url, force):
    os.makedirs(outdir, exist_ok=True)
    icons = {}
    for name, (size, d) in ICONS.items():
        iconfilename = do_icon(outdir, name, urllib.parse.urljoin(url, d), force)
        icons[name] = (size, iconfilename)
    cssout = os.path.join(outdir, 'icons.css')
    print('writing {}'.format(cssout))
    with open(cssout, 'w') as f:
        f.write('/* this file was generated by ../update.py \n')
        f.write('   do not edit it manually, or changes will be lost! */ \n')
        
        for name, (size, fname) in icons.items():
            f.write('.icon-{} {{\n'.format(name))

            # use background image to render icons
            f.write('    background-image: url("{}");\n'.format(fname))
            f.write('    background-repeat: no-repeat;\n')
            f.write('    background-origin: content-box;\n')
            f.write('    background-position: center center;\n')
            f.write('    background-size: cover;\n')

            # give them a reasonable size, displayed inline
            f.write('    width: {}em;\n'.format(size))
            f.write('    height: {}em;\n'.format(size))
            f.write('    display: inline-block;\n')
            f.write('    vertical-align: middle;\n')

            # hide any associated text, but leave it for screen readers
            f.write('    text-indent: 100%;\n')
            f.write('    white-space: nowrap;\n')
            f.write('    overflow: hidden;\n')
            f.write('}\n')

@click.command()
@click.option('-f', '--force', is_flag=True)
def do_all(force):
    outdir = os.path.split(__file__)[0]
    for theme, d in THEMES.items():
        theme_out = os.path.join(outdir, theme)
        theme_url = urllib.parse.urljoin(BREEZE_URL, d)
        do_theme(theme_out, theme_url, force)

if __name__ == '__main__':
    do_all()
